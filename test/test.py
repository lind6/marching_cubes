#!/usr/bin/env python3

import numpy as np
import pyvista as pv

def test_superquadric( f ):

    ## test cases ##
    try:
        np.testing.assert_almost_equal( f( [0,0,0] ), 0.0, err_msg="Failed case 1", verbose=False )
        np.testing.assert_almost_equal( f( [1,1,1] ), 1.7320508075688772, err_msg="Failed case 2", verbose=False )
        np.testing.assert_almost_equal( f( [-5,-6,-777], [1,1,1], [3,3,3] ), 21658.665101986317, err_msg="Failed case 3", verbose=False )
        np.testing.assert_almost_equal( f( [-1,-2,-100], [4,0.5,12], [7,0.25,14] ), 2790816.4723367887, err_msg="Failed case 4", verbose=False )
        np.testing.assert_almost_equal( f( [-5,-6,-777]  ), 777.0392525477719, err_msg="Failed case 5", verbose=False )
        np.testing.assert_almost_equal( f( [0,0,0], [4,2,1], [-3,-1,-5]  ), 0.0, err_msg="Failed case 6", verbose=False )
        np.testing.assert_almost_equal( f( [-1,-1,-1], [4,2,1], [-3,-1,-5]  ), 8.18535277187245, err_msg="Failed case 7", verbose=False )
        
    except Exception as e:
        print( e )
        return

    print( "superQuadric() tests succeeded" )
    return


def test_cell():

	print( "cell() tests succeeded" )
	return
	
def test_evalTetra_range( f, tetraIndex, bitCode, failMessage ):

    try:
        aPolygons = f( tetraIndex, bitCode )
    except Exception as e:
        print( "  Error: evalTetra( " + str(tetraIndex) + ", " + str(bitCode) + " ) " + failMessage )
        return True
        
    if aPolygons != []:
        print( "  Error: evalTetra( " + str(tetraIndex) + ", " + str(bitCode) + " ) returns non-empty polygon list" )
        return True
        
    return False
	
def test_evalTetra( f ):
    # bitcodes to test: -10, 3, 13, 72, 192, 236, 255, 1000
    
    a = [-99999,-10,-1,6,7,10,99999]
    b = [10]*len(a)
    
    # tetrahedron index validation
    message = "- invalid tetrahedron index"   
    for i in range(0,len(a),1):
        if test_evalTetra_range( f, a[i], b[i], message ):
            return True

    b = [-99999,-255,-1,256,999999] 
        
    # bitcode validation
    message = "- invalid bitcode"
    for i in range(0,len(b),1):
        if test_evalTetra_range( f, i, b[i], message ):
            return True
        
    print( "bounds test succeeded" )
            
    # polygon connectivity validation
    c = [1,1,1,1,1,1,0,0,0,1,1,0,1,1,1,2,2,1,0,0,1,1,0,0,1,1,2,2,1,1,0,0,1,2,1,0,1,1,2,1,2,1,0,1,1,0,0,0,1,2,2,1,1,1,0,1,1,1,1,0,1,2,2,2,2,1,0,1,2,1,0,0,1,2,1,2,1,1,0,1,2,2,1,0,1,2,1,1,2,1,1,0,0,0,0,1,2,1,1,1,1,2,1,0,0,1,1,1,2,1,1,2,2,2,1,0,1,1,0,1,2,1,2,2,1,2,1,0,1,2,1,1,2,1,2,1,2,2,1,1,1,0,0,1,2,2,2,1,1,2,1,1,1,1,1,1,2,2,2,2,2,2,1,1,2,1,0,1,2,2,1,2,1,2,1,1,2,2,1,1,2,2,1,1,2,2,0,0,0,0,1,1,1,1,1,1,2,2,0,0,0,1,2,1,1,1,1,2,1,2,0,0,1,1,1,1,1,1,2,2,2,2,0,0,1,2,2,1,1,1,2,1,1,2,0,1,1,0,1,1,1,2,2,1,2,2,0,1,1,1,2,1,1,2,2,2,1,2,0,1,2,1,1,1,1,2,1,2,2,2,0,1,2,2,2,1,1,2,1,1,1,2,1,0,0,0,1,2,2,1,1,1,2,1,1,0,0,1,2,2,2,1,1,2,1,1,1,0,1,1,1,2,2,1,2,2,2,1,1,0,1,2,2,2,2,1,2,1,1,1,1,1,1,0,1,2,2,2,2,1,2,1,1,1,1,1,2,2,2,2,2,2,1,1,1,1,2,1,1,2,2,2,1,2,2,1,1,1,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,1,1,1,2,2,1,2,2,2,1,1,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,1,2,1,2,2,1,0,1,2,1,2,2,1,1,1,2,1,1,2,2,2,1,2,2,2,2,1,2,1,1,1,1,2,1,2,1,2,1,1,2,1,0,1,2,2,1,2,1,1,2,1,2,1,0,0,1,2,2,1,1,1,1,2,1,2,2,2,2,1,2,1,1,2,2,2,1,2,2,1,1,1,2,1,2,2,1,2,1,2,1,1,2,1,2,1,2,1,2,2,1,2,1,0,1,1,2,2,2,1,1,2,1,1,1,2,2,1,2,2,2,2,2,2,1,1,1,1,1,1,2,2,1,2,1,2,1,1,0,1,2,1,2,2,1,1,2,2,1,1,0,0,1,1,1,1,1,1,2,2,2,2,2,2,1,1,1,1,1,2,1,2,2,2,2,1,0,1,1,1,2,2,2,2,2,2,1,1,1,1,1,1,2,1,1,2,2,2,1,0,0,1,1,2,2,1,2,2,2,1,1,2,1,1,1,2,2,2,1,2,2,1,1,1,0,1,1,2,1,2,2,2,2,1,0,1,1,1,1,2,1,1,1,2,2,1,0,0,0,1,2,1,1,1,2,1,1,2,2,2,1,0,2,1,1,2,1,1,1,2,2,1,0,0,2,1,2,2,2,1,1,2,1,1,1,0,2,1,2,1,1,1,1,2,1,0,0,0,2,2,2,1,2,1,1,1,1,2,1,0,2,2,2,2,1,1,1,1,1,1,0,0,2,2,1,2,2,1,1,1,0,1,1,0,2,2,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,2,2,1,1,1,1,1,1,0,1,1,0,2,2,1,2,2,1,1,1,1,1,0,0,2,2,2,2,1,1,1,1,1,2,1,0,2,2,2,1,2,1,1,2,1,0,0,0,2,1,2,1,1,1,1,2,1,1,1,0,2,1,2,2,2,1,1,2,2,1,0,0,2,1,1,2,1,1,1,2,2,2,1,0,2,1,1,1,2,1,2,1,0,0,0,1,1,2,1,1,1,2,2,1,0,1,1,1,1,2,1,2,2,2,2,1,1,1,0,1,1,2,2,2,1,2,2,1,1,2,1,1,1,2,2,1,2,2,2,2,1,0,0,1,1,1,2,1,1,2,2,2,1,1,1,1,1,1,2,2,2,2,2,2,2,1,0,1,1,1,1,2,1,2,2,2,2,2,1,1,1,1,1,1,2,2,1,1,0,0,1,1,2,2,1,1,2,2,1,1,0,1,2,1,2,2,1,2,1,2,1,1,1,1,1,1,2,2,2,2,2,2,1,1,1,2,2,1,2,2,2,1,1,2,1,2,1,0,1,1,2,1,2,1,2,2,1,2,1,1,2,1,2,1,2,2,1,2,1,2,2,1,1,1,2,1,1,2,2,2,1,2,2,2,2,1,2,1,1,1,1,2,2,1,0,0,1,2,1,2,1,1,2,1,2,1,0,1,2,2,1,2,1,2,1,1,2,1,1,1,1,2,1,2,2,2,2,1,2,1,1,2,2,2,1,2,2,1,1,1,2,2,1,0,1,2,1,1,2,1,2,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,2,1,1,2,1,1,1,2,2,1,2,2,2,2,2,2,1,1,1,1,1,1,2,2,1,1,1,1,1,1,2,2,2,2,2,2,1,2,2,1,1,1,2,1,1,2,2,2,2,2,1,1,1,1,1,1,2,2,2,2,2,1,2,1,1,1,1,0,1,2,2,1,2,1,1,1,1,0,1,2,2,2,2,1,2,2,2,1,1,0,1,1,1,2,2,1,1,2,1,1,1,0,0,1,2,2,2,1,1,1,2,1,1,0,0,0,1,2,1,2,1,1,1,2,0,1,2,2,2,1,1,2,1,2,2,2,0,1,2,1,1,1,1,2,2,2,1,2,0,1,1,1,2,1,1,2,2,1,2,2,0,1,1,0,1,1,1,1,2,1,1,2,0,0,1,2,2,1,1,1,2,2,2,2,0,0,1,1,1,1,1,1,1,2,1,2,0,0,0,1,2,1,1,1,1,1,2,2,0,0,0,0,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,2,1,2,1,1,2,1,0,1,2,2,2,2,2,2,1,1,1,1,1,1,2,2,2,1,1,2,1,1,1,0,0,1,2,1,2,1,2,2,1,0,1,2,1,1,2,1,2,2,1,2,1,0,1,1,0,1,2,1,1,2,2,2,1,0,0,1,1,1,2,1,1,1,1,2,1,0,0,0,0,1,1,2,1,1,2,1,0,1,2,2,1,0,1,2,1,2,1,1,0,1,2,1,0,0,1,2,2,2,2,1,0,1,1,1,1,0,1,2,2,1,1,1,0,1,1,0,0,0,1,1,2,1,2,1,0,0,1,2,1,0,1,1,2,2,1,1,0,0,1,1,0,0,1,1,1,2,2,1,0,0,0,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0]
    n = 0
    for i in range(1,256,1):
        for j in range(0,6,1):
            r = f( j, i )
            if len(r) != c[n]:
                print( "  Error: evalTetra( " + str(j) + ", " + str(i) + " ) returns " + str(len(r)) + " polygons (expected: " + str(c[n]) + ")" )
                return True
            n += 1
    print( "polygon count test succeeded" )
                
    # randomly chosen cases
    a = [0,1,2,3,4,5, 0,1,2,3,4,5, 0,1,2,3,4,5, 0,1,2,3,4,5, 0,1,2,3,4,5, 0,1,2,3,4,5, 0,1,2,3,4,5]
    b = [3,3,3,3,3,3, 51,51,51,51,51,51, 72,72,72,72,72,72, 135,135,135,135,135,135, 179,179,179,179,179,179, 211,211,211,211,211,211, 251,251,251,251,251,251 ]
    r = [
        # 3
        [[3, 14, 18, 8]],
        [[3, 3, 18, 14]],
        [[3, 18, 3, 12]],
        [[3, 18, 12, 1], [3, 1, 16, 18]],
        [[3, 18, 16, 9], [3, 9, 13, 18]],
        [[3, 18, 13, 8]],
        
        # 51
        [[3, 18, 15, 7], [3, 7, 14, 18]],
        [[3, 3, 18, 14]],
        [[3, 18, 3, 12]],
        [[3, 18, 12, 1], [3, 1, 16, 18]],
        [[3, 18, 16, 5]],
        [[3, 5, 15, 18]],
        
        #72
        [[3, 6, 15, 18]],
        [[3, 11, 6, 18], [3, 18, 3, 11]],
        [[3, 3, 18, 10], [3, 10, 2, 3]],
        [[3, 18, 16, 10]],
        [[3, 5, 16, 18]],
        [[3, 18, 15, 5]],

        # 135
        [[3, 18, 8, 7], [3, 7, 6, 18]],
        [[3, 11, 3, 18], [3, 18, 6, 11]],
        [[3, 3, 2, 10], [3, 10, 18, 3]],
        [[3, 10, 16, 18]],
        [[3, 18, 16, 9], [3, 9, 13, 18]],
        [[3, 18, 13, 8]],
        
        # 179
        [[3, 18, 15, 6]],
        [[3, 11, 3, 18], [3, 18, 6, 11]],
        [[3, 18, 3, 12]],
        [[3, 18, 12, 1], [3, 1, 16, 18]],
        [[3, 18, 16, 5]],
        [[3, 5, 15, 18]],
        
        # 211
        [],
        [[3, 3, 17, 11]],
        [[3, 3, 12, 10], [3, 10, 17, 3]],
        [[3, 12, 1, 10]],
        [[3, 5, 9, 13]],
        [[3, 13, 4, 5]],
        
        # 251
        [],
        [],
        [[3, 10, 2, 12]],
        [[3, 12, 1, 10]],
        [],
        []
    ]
    
    for i in range(0,len(a),1):
        v = f( a[i], b[i] )
        if v != r[i]:
            print( "  Error: evalTetra( " + str(a[i]) + "," + str(b[i]) + " ) produced wrong output:", v )
            return True
    print( "randomly selected cases succeeded" )
    
    
    print( "evalTetra() tests succeeded" )
